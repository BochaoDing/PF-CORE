<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE project   [
<!ENTITY common SYSTEM "common.xml">
]>

<!-- 
Author <a href="mailto:schaatser@powerfolder.com">Jan van Oosterom</a>
Version: $Revision: 1.8 $

Default Target = jar
compiles and generates a signed jar

Setup: use the ant.properties file to setup your local settings.
 - 1 for signing update the location of the keystore in the property KeystoreLocation
 - 2 Password for signing is not checked in cvs ... update property SignPassword

Optional Targets:
clean  - cleans up the working dirs
installer - generates an installer (see Notes)

For creation of the installer:
 1 - Works only on windows systems, install nsis and get the installer scripts from the cvs 
     (note the cvs is old for the installer, we use our own SVN for that now).
 2 - Setup the correct version numbers
 3 - Setup your name it will be included in the jar manifest file
 4 - Make sure to set up the following properties:
     InstallerFilesLocation and InstallerGeneratorProgram
-->
<project name="PowerFolder" default="jar" basedir=".">
	<description>
        Build PowerFolder.jar with ant
    </description>
	<!-- sets the standard DSTAMP, TSTAMP, and TODAY properties according to the default formats: -->
	<tstamp >
		<!--must match the format in AboutDialog2-->
		<format property="BuildDateTime" pattern="MMMM/dd/yyyy hh:mm:ss a, z"/>
		
	</tstamp>

	<property file="${basedir}/ant.properties" />
	<!-- set global properties for this build -->
	<property name="InstallerScriptName" value="script.nsi" />

	<property name="src" location="src" />
	<property name="build" location="build" />
	<property name="dist" location="dist" />
	<property name="apacheCommons" location="commons" />
	<property name="jgoodies_lib" location="jgoodies\lib" />
	<property name="jgoodies_src" location="jgoodies\src" />
	<property name="systray" location="systray" />
	<property name="xmlrpc" location="xmlrpc" />
	<property name="jd3lib" location="jd3lib" />
	<property name="jwf" location="jwf" />
	<property name="license" location="LICENSE" />
	<property name="etc" location="etc" />
			
	<target name="compile" description="compile the source ">
		<mkdir dir="${build}" />
		<!-- to surpress warnings set to true -->
		<javac destdir="${build}" 
			source="1.5" 			
			nowarn="${NoCompileWarnings}" 
			debug="${Debug}" 
			deprecation="${Deprecation}"
			optimize="${Optimize}">
			<!-- javac 1.5 specific warnings -->
			<compilerarg value="-Xlint:${Unchecked}"/>
			<compilerarg value="-Xlint:${Fallthrough}"/>
			
			<classpath>				
				<pathelement path="${velocity}" />
				<pathelement path="${jgoodies_lib}" />
				<pathelement path="${xmlrpc}" />
			</classpath>
			<src path="${src}" />
			<src path="${apacheCommons}" />
			<src path="${jgoodies_lib}" />
			<src path="${jgoodies_src}" />
			<src path="${systray}" />
			<src path="${jd3lib}" />
			<src path="${jwf}" />			
		</javac>

		<!-- copy files from etc to include in jar -->
		<copy todir="${build}">
			<fileset dir="etc" />
		</copy>

		<!-- copy class files from jgoodies that don't have *.java sources to include in the jar-->
		<mkdir dir="${build}\com\jgoodies\" />
		<copy todir="${build}\com\jgoodies\">
			<fileset dir="${jgoodies_lib}\com\jgoodies\" />
		</copy>
		
		<!-- copy images from jgoodies that are needed -->
		<copy todir="${build}\com\jgoodies\looks\common">
			<fileset file="${jgoodies_src}\com\jgoodies\looks\common\shadow.png" />
		</copy>

		<mkdir dir="${build}\com\jgoodies\looks\plastic\icons" />
		<copy todir="${build}\com\jgoodies\looks\plastic\icons">
			<fileset dir="${jgoodies_src}\com\jgoodies\looks\plastic\icons\" />
		</copy>
		<mkdir dir="${build}\com\jgoodies\looks\windows\icons" />

		<copy todir="${build}\com\jgoodies\looks\windows\icons">
			<fileset dir="${jgoodies_src}\com\jgoodies\looks\windows\icons\" />
		</copy>

		<!-- copy class files from xmlrpc to include in the jar -->
		<copy todir="${build}">
			<fileset dir="${xmlrpc}">				
			</fileset>
		</copy>
		
	</target>

	<target name="jar" depends="compile" description="create a signed jar file">
		<!-- Create the distribution directory -->
		<mkdir dir="${dist}" />
		<!-- Copy the license dir to include in the destribution -->
		<copy todir="${dist}\LICENSE">
			<fileset dir="${license}" />
		</copy>
		<!-- Copy the Release Notes to include in the destribution -->
		<copy todir="${dist}">
			<fileset file="ReleaseNotes.txt" />
		</copy>

		<!-- Put everything in ${build} into the PowerFolder.jar file -->

		<jar jarfile="${dist}\PowerFolder.jar" basedir="${build}">
			<manifest>
				<attribute name="Built-By" value="${BuildBy}" />
				<attribute name="Version" value="${MajorVersion}.${MinorVersion}.${RevisionVersion}" />
				<attribute name="BuildDateTime" value="${BuildDateTime}" />				
				<attribute name="Sealed" value="true" />
				<attribute name="Main-Class" value="de.dal33t.powerfolder.PowerFolder" />
			</manifest>
		</jar>

		<signjar jar="${dist}\PowerFolder.jar" keystore="${KeystoreLocation}" storepass="${SignPassword}" alias="myKey" />

	</target>

	<!-- generate an installer  -->
	<target name="installer" depends="jar" description="generate the installer">
		<copy todir="${InstallerFilesLocation}\files">
			<fileset file="${etc}\ReleaseNotes.txt" />
		</copy>

		<copy todir="${InstallerFilesLocation}\files">
			<fileset file="${dist}\PowerFolder.jar" />
		</copy>

		<!-- "C:\Program Files\NSIS\makensisw.exe" /DAPPVERSION=v0.9.2 /DVER_MAJOR=0 /DVER_MINOR=9 /DVER_REVISION=2 /DVER_BUILD=0 script.nsi -->
		<property name="versionString" value="${MajorVersion}.${MinorVersion}.${RevisionVersion}" />
		<exec dir="${InstallerFilesLocation}" executable="${InstallerGeneratorProgram}">
			<arg value="/DAPPVERSION=v${versionString}" />
			<arg value="/DVER_MAJOR=${MajorVersion}" />
			<arg value="/DVER_MINOR=${MinorVersion}" />
			<arg value="/DVER_REVISION=${RevisionVersion}" />
			<!-- FIXME: maybe add a build number (or date:time) here? -->
			<arg value="/DVER_BUILD=0" />
			<arg value="${InstallerScriptName}" />
		</exec>
	</target>

	<!-- clean the working dirs -->
	<target name="clean" description="clean up">
		<!-- Delete the ${build} and ${dist} directory trees -->
		<delete dir="${build}" />
		<delete dir="${dist}" />
	</target>
</project>